package jp.co.soramitsu.iroha2

import jp.co.soramitsu.iroha2.generated.PermissionId

enum class Permissions(val type: PermissionId) {
    CanBurnUserTrigger(PermissionId("CanBurnUserTrigger".asName())),
    CanUnregisterAccount(PermissionId("CanUnregisterAccount".asName())),
    CanMintUserPublicKeys(PermissionId("CanMintUserPublicKeys".asName())),
    CanBurnUserPublicKeys(PermissionId("CanBurnUserPublicKeys".asName())),
    CanMintUserSignatureCheckConditions(PermissionId("CanMintUserSignatureCheckConditions".asName())),
    CanSetKeyValueInUserAccount(PermissionId("CanSetKeyValueInUserAccount".asName())),
    CanRemoveKeyValueInUserAccount(PermissionId("CanRemoveKeyValueInUserAccount".asName())),
    CanRegisterAssetsWithDefinition(PermissionId("CanRegisterAssetsWithDefinition".asName())),
    CanUnregisterAssetsWithDefinition(PermissionId("CanUnregisterAssetsWithDefinition".asName())),
    CanUnregisterUserAsset(PermissionId("CanUnregisterUserAsset".asName())),
    CanBurnAssetWithDefinition(PermissionId("CanBurnAssetsWithDefinition".asName())),
    CanBurnUserAssetToken(PermissionId("CanBurnUserAsset".asName())),
    CanMintUserAssetDefinitionsToken(PermissionId("CanMintAssetsWithDefinition".asName())),
    CanTransferAssetsWithDefinition(PermissionId("CanTransferAssetsWithDefinition".asName())),
    CanTransferUserAssetsToken(PermissionId("CanTransferUserAsset".asName())),
    CanSetKeyValueUserAssetsToken(PermissionId("CanSetKeyValueInUserAsset".asName())),
    CanRemoveKeyValueInUserAssets(PermissionId("CanRemoveKeyValueInUserAsset".asName())),
    CanUnregisterAssetDefinition(PermissionId("CanUnregisterAssetDefinition".asName())),
    CanSetKeyValueInAssetDefinition(PermissionId("CanSetKeyValueInAssetDefinition".asName())),
    CanRemoveKeyValueInAssetDefinition(PermissionId("CanRemoveKeyValueInAssetDefinition".asName())),
    CanUnregisterDomain(PermissionId("CanUnregisterDomain".asName())),
    CanSetKeyValueInDomain(PermissionId("CanSetKeyValueInDomain".asName())),
    CanRemoveKeyValueInDomain(PermissionId("CanRemoveKeyValueInDomain".asName())),
    CanGrantPermissionToCreateParameters(PermissionId("CanGrantPermissionToCreateParameters".asName())),
    CanRevokePermissionToCreateParameters(PermissionId("CanRevokePermissionToCreateParameters".asName())),
    CanCreateParameters(PermissionId("CanCreateParameters".asName())),
    CanGrantPermissionToSetParameters(PermissionId("CanGrantPermissionToSetParameters".asName())),
    CanRevokePermissionToSetParameters(PermissionId("CanRevokePermissionToSetParameters".asName())),
    CanSetParameters(PermissionId("CanSetParameters".asName())),
    CanUnregisterAnyPeer(PermissionId("CanUnregisterAnyPeer".asName())),
    CanUnregisterAnyRole(PermissionId("CanUnregisterAnyRole".asName())),
    CanExecuteUserTrigger(PermissionId("CanExecuteUserTrigger".asName())),
    CanUnregisterUserTrigger(PermissionId("CanUnregisterUserTrigger".asName())),
    CanMintUserTrigger(PermissionId("CanMintUserTrigger".asName())),
    CanUpgradeExecutor(PermissionId("CanUpgradeExecutor".asName())),
    CanRemoveKeyValueInTrigger(PermissionId("CanRemoveKeyValueInTrigger".asName())),
    CanSetKeyValueInTrigger(PermissionId("CanSetKeyValueInTrigger".asName())),
}

enum class IdKey(val type: String) {
    AccountId("account"),
    AssetId("asset"),
    AssetDefinitionId("asset_definition"),
    DomainId("domain"),
}
